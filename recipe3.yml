- hosts: all
  gather_facts: yes
  become: true
  vars:
    rabbitmq_host: "192.168.0.11"
    memcache_host: "192.168.0.11"
    mariadb_host: "192.168.0.11"
    controller_host: "192.168.0.11"
    linux_user_name: "ubuntu"

  pre_tasks:
    - name: 'Install python2'
      raw: apt-get -y install python-simplejson
      register: apt_python
      changed_when: apt_python.stdout.find('0 newly installed') == -1

    - name: 'Install aptitude'
      raw: apt-get -y install aptitude
      register: apt_aptitude
      changed_when: apt_aptitude.stdout.find('0 newly installed') == -1

  tasks:

    #
    # Neutron
    #

    - name: Create project, user, role, service, endpoints
      shell: "{{ item }}"
      ignore_errors: yes
      with_items:
        - openstack user create --domain default --project service --password servicepassword neutron
        - openstack role add --project service --user neutron admin
        - openstack service create --name neutron --description "OpenStack Networking service" network
        - "openstack endpoint create --region RegionOne network public http://{{ controller_host }}:9696"
        - "openstack endpoint create --region RegionOne network internal http://{{ controller_host }}:9696"
        - "openstack endpoint create --region RegionOne network admin http://{{ controller_host }}:9696"
      environment:
        OS_PROJECT_DOMAIN_NAME: default
        OS_USER_DOMAIN_NAME: default
        OS_PROJECT_NAME: admin
        OS_USERNAME: admin
        OS_PASSWORD: adminpassword
        OS_AUTH_URL: "http://{{ controller_host }}:35357/v3"
        OS_IDENTITY_API_VERSION: 3
        OS_IMAGE_API_VERSION: 2

    - name: 'Install apt packages'
      apt: pkg={{ item }} state=present update_cache=yes
      with_items:
        - neutron-server
        - neutron-plugin-ml2
        - neutron-plugin-linuxbridge-agent
        - neutron-l3-agent
        - neutron-dhcp-agent
        - neutron-metadata-agent
        - python-neutronclient
      register: apt_res1
      retries: 5
      until: apt_res1 | success

    - name: Check that the somefile.conf exists
      stat: path=/etc/neutron/neutron.conf.org
      register: stat_result3

    - name: Create the file, if it doesnt exist already
      shell: mv /etc/neutron/neutron.conf /etc/neutron/neutron.conf.org
      when: stat_result3.stat.exists == False

    - name: Create neutron.conf
      file: path=/etc/neutron/neutron.conf state=touch owner="root" group="neutron" mode="u=rw,g=r,o=r"

    - name: Create neutron.conf
      blockinfile:
        dest: /etc/neutron/neutron.conf
        block: |
          [DEFAULT]
          core_plugin = ml2
          service_plugins = router
          auth_strategy = keystone
          state_path = /var/lib/neutron
          dhcp_agent_notification = True
          allow_overlapping_ips = True
          notify_nova_on_port_status_changes = True
          notify_nova_on_port_data_changes = True
          transport_url = rabbit://openstack:password@{{ rabbitmq_host }}

          [agent]
          root_helper = sudo /usr/bin/neutron-rootwrap /etc/neutron/rootwrap.conf

          [keystone_authtoken]
          auth_uri = http://{{ controller_host }}:5000
          auth_url = http://{{ controller_host }}:35357
          memcached_servers = {{ memcache_host }}:11212
          auth_type = password
          project_domain_name = default
          user_domain_name = default
          project_name = service
          username = neutron
          password = servicepassword

          [database]
          connection = mysql+pymysql://neutron:password@{{ mariadb_host }}/neutron_ml2

          [nova]
          auth_url = http://{{ controller_host }}:35357
          auth_type = password
          project_domain_name = default
          user_domain_name = default
          region_name = RegionOne
          project_name = service
          username = nova
          password = servicepassword

          [oslo_concurrency]
          lock_path = $state_path/tmp
          
    - name: change setting in l3_agent.ini
      replace: >-
        dest="/etc/neutron/l3_agent.ini"
        regexp="#interface_driver = <None>"
        replace="interface_driver = linuxbridge"

    - name: change setting in dhcp_agent.ini
      replace: >-
        dest="/etc/neutron/dhcp_agent.ini"
        regexp="#interface_driver = <None>"
        replace="interface_driver = linuxbridge"

    - name: change setting in dhcp_agent.ini
      replace: >-
        dest="/etc/neutron/dhcp_agent.ini"
        regexp="#dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq"
        replace="dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq"

    - name: change setting in dhcp_agent.ini
      replace: >-
        dest="/etc/neutron/dhcp_agent.ini"
        regexp="#enable_isolated_metadata = false"
        replace="enable_isolated_metadata = True"


    - name: change setting in metadata_agent.ini
      replace: >-
        dest="/etc/neutron/metadata_agent.ini"
        regexp="#nova_metadata_host = 127.0.0.1"
        replace="nova_metadata_host = {{ controller_host }}"

    - name: change setting in metadata_agent.ini
      replace: >-
        dest="/etc/neutron/metadata_agent.ini"
        regexp="#metadata_proxy_shared_secret ="
        replace="metadata_proxy_shared_secret = metadata_secret"

    - name: change setting in metadata_agent.ini
      replace: >-
        dest="/etc/neutron/metadata_agent.ini"
        regexp="#memcache_servers = localhost:11211"
        replace="memcache_servers = {{ memcache_host }}:11212"

    #- name: change setting in ml2_conf.ini
    #  lineinfile:
    #    dest: /etc/neutron/plugins/ml2/ml2_conf.ini
    #    line: "type_drivers = flat,vlan,vxlan\ntenant_network_types =\nmechanism_drivers = linuxbridge,l2population\nextension_drivers = port_security\n"
    #    insertafter: '^\[ml2\]$'
    #    state: present

    - name: change setting in ml2_conf.ini
      blockinfile:
        dest: /etc/neutron/plugins/ml2/ml2_conf.ini
        block: |
          type_drivers = flat,vlan,vxlan
          tenant_network_types =
          mechanism_drivers = linuxbridge,l2population
          extension_drivers = port_security
        insertafter: '^\[ml2\]$'
        state: present

    - name: change setting in ml2_conf.ini
      replace: >-
        dest="/etc/neutron/plugins/ml2/ml2_conf.ini"
        regexp="#enable_security_group = true"
        replace="enable_security_group = true"

    - name: change setting in ml2_conf.ini
      replace: >-
        dest="/etc/neutron/plugins/ml2/ml2_conf.ini"
        regexp="#enable_ipset = true"
        replace="enable_ipset = true"

    - name: change setting in ml2_conf.ini
      lineinfile:
        dest: /etc/neutron/plugins/ml2/ml2_conf.ini
        line: "firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver"
        insertafter: '^enable_security_group = true$'
        state: present

    #- name: change setting in ml2_conf.ini
    #  blockinfile:
    #    dest: /etc/neutron/plugins/ml2/ml2_conf.ini
    #    block: |
    #      firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
    #    insertafter: '^enable_security_group = true$'
    #    state: present


    - name: Create nova.conf
      blockinfile:
        dest: /etc/nova/nova.conf
        block: |
          [DEFAULT]
          my_ip = {{ ansible_default_ipv4.address }}
          state_path = /var/lib/nova
          enabled_apis = osapi_compute,metadata
          log_dir = /var/log/nova
          transport_url = rabbit://openstack:password@{{ rabbitmq_host }}
          use_neutron = True
          linuxnet_interface_driver = nova.network.linux_net.LinuxBridgeInterfaceDriver
          firewall_driver = nova.virt.firewall.NoopFirewallDriver
          vif_plugging_is_fatal = True
          vif_plugging_timeout = 300
          cpu_allocation_ratio = 16
          ram_allocation_ratio = 3.0
          disk_allocation_ratio = 10

          [api]
          auth_strategy = keystone

          [glance]
          api_servers = http://{{ controller_host }}:9292

          [oslo_concurrency]
          lock_path = $state_path/tmp

          [api_database]
          connection = mysql+pymysql://nova:password@{{ mariadb_host }}/nova_api

          [database]
          connection = mysql+pymysql://nova:password@{{ mariadb_host }}/nova

          [keystone_authtoken]
          auth_uri = http://{{ controller_host }}:5000
          auth_url = http://{{ controller_host }}:35357
          memcached_servers = {{ memcache_host }}:11212
          auth_type = password
          project_domain_name = default
          user_domain_name = default
          project_name = service
          username = nova
          password = servicepassword

          [placement]
          auth_url = http://{{ controller_host }}:35357
          os_region_name = RegionOne
          auth_type = password
          project_domain_name = default
          user_domain_name = default
          project_name = service
          username = placement
          password = servicepassword

          [placement_database]
          connection = mysql+pymysql://nova:password@{{ mariadb_host }}/nova_placement

          [wsgi]
          api_paste_config = /etc/nova/api-paste.ini

          [neutron]
          url = http://{{ controller_host }}:9696
          auth_url = http://{{ controller_host }}:35357
          auth_type = password
          project_domain_name = default
          user_domain_name = default
          region_name = RegionOne
          project_name = service
          username = neutron
          password = servicepassword
          service_metadata_proxy = True
          metadata_proxy_shared_secret = metadata_secret
 
          [vnc]
          enabled = True
          #vncserver_listen = 0.0.0.0
          #vncserver_proxyclient_address = {{ controller_host }}
          novncproxy_base_url = http://{{ controller_host }}:6080/vnc_auto.html

    - name: Create symlink
      file: src=/etc/neutron/plugins/ml2/ml2_conf.ini  dest=/etc/neutron/plugin.ini state=link owner="root" group="neutron"

    - name: db_sync
      become_user: neutron
      shell: "{{ item }}"
      ignore_errors: yes
      with_items:
        - "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugin.ini upgrade head"

    - name: reload services
      systemd:
        name: "{{ item }}"
        state: restarted
      with_items:
        - neutron-server
        - neutron-l3-agent
        - neutron-dhcp-agent
        - neutron-metadata-agent
        - neutron-linuxbridge-agent
        - nova-api
        - nova-compute

    #
    # Neutron Plugin
    #

    - name: update ml2_conf.ini
      lineinfile:
        dest: /etc/neutron/plugins/ml2/ml2_conf.ini
        line: "flat_networks = physnet1"
        insertafter: '^\[ml2_type_flat\]$'
        state: present

    #- name: update ml2_conf.ini
    #  blockinfile:
    #    dest: /etc/neutron/plugins/ml2/ml2_conf.ini
    #    block: |
    #      flat_networks = physnet1
    #    insertafter: '^\[ml2_type_flat\]$'
    #    state: present

    - name: update linuxbridge_agent.ini
      lineinfile:
        dest: /etc/neutron/plugins/ml2/linuxbridge_agent.ini
        line: "physical_interface_mappings = physnet1:enp8s0f1"
        insertafter: '^\[linux_bridge\]$'
        state: present

    #- name: update linuxbridge_agent.ini
    #  blockinfile:
    #    dest: /etc/neutron/plugins/ml2/linuxbridge_agent.ini
    #    block: |
    #     physical_interface_mappings = physnet1:enp8s0f1
    #    insertafter: '^\[linux_bridge\]$'
    #    state: present

    - name: change setting in linuxbridge_agent.ini
      replace: >-
        dest="/etc/neutron/plugins/ml2/linuxbridge_agent.ini"
        regexp="#enable_vxlan = true"
        replace="enable_vxlan = false"

    - name: reload services
      systemd:
        name: "{{ item }}"
        state: restarted
      with_items:
        - neutron-linuxbridge-agent

    - name: get project id
      shell: "openstack project list | grep service | awk '{print $2}'"
      register: project_id_result
      environment:
        OS_PROJECT_DOMAIN_NAME: default
        OS_USER_DOMAIN_NAME: default
        OS_PROJECT_NAME: admin
        OS_USERNAME: admin
        OS_PASSWORD: adminpassword
        OS_AUTH_URL: "http://{{ controller_host }}:35357/v3"
        OS_IDENTITY_API_VERSION: 3
        OS_IMAGE_API_VERSION: 2

    - name: Create Network
      shell: "{{ item }}"
      ignore_errors: yes
      with_items:
        - "openstack network create --project {{ project_id_result.stdout }} --share --provider-network-type flat --provider-physical-network physnet1 sharednet1"
        - "openstack subnet create subnet1 --network sharednet1 --project {{ project_id_result.stdout }} --subnet-range 192.168.0.0/24 --allocation-pool start=192.168.0.150,end=192.168.0.200 --gateway 192.168.0.1 --dns-nameserver 8.8.8.8"
      environment:
        OS_PROJECT_DOMAIN_NAME: default
        OS_USER_DOMAIN_NAME: default
        OS_PROJECT_NAME: admin
        OS_USERNAME: admin
        OS_PASSWORD: adminpassword
        OS_AUTH_URL: "http://{{ controller_host }}:35357/v3"
        OS_IDENTITY_API_VERSION: 3
        OS_IMAGE_API_VERSION: 2

